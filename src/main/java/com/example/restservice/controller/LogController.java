package com.example.restservice.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.io.File;
import java.nio.file.Files;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/logs")
@Tag(name = "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", description = "–†–∞–±–æ—Ç–∞ —Å –ª–æ–≥–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
public class LogController {

    private static final Logger logger = LoggerFactory.getLogger(LogController.class);
    private static final String LOG_FILE_PATH = "logs/app.log";

    @GetMapping
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø–æ –¥–∞—Ç–µ",
            description = "–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ app.log, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"
    )
    @ApiResponse(responseCode = "200", description = "–õ–æ–≥-—Ñ–∞–π–ª –≤–æ–∑–≤—Ä–∞—â—ë–Ω")
    @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    @ApiResponse(responseCode = "404", description = "–õ–æ–≥ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω")
    public ResponseEntity<Object> getLogsByDate(
            @Parameter(description = "–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-MM-dd")
            @RequestParam String date) {
        try {
            String sanitizedDate = date.replaceAll("[^\\d\\-]", "");
            logger.info("üìÇ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥ –∑–∞ –¥–∞—Ç—É {}", sanitizedDate);


            File logFile = new File(LOG_FILE_PATH);
            if (!logFile.exists()) {
                String safeDate = date.replaceAll("[^\\d\\-]", "");
                logger.warn("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞—Ç—ã {}", safeDate);
                return ResponseEntity.status(404).body("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }

            List<String> filteredLines = Files.lines(logFile.toPath())
                    .filter(line -> line.startsWith(date))
                    .toList();

            if (filteredLines.isEmpty()) {
                String safeDate = date.replaceAll("[^\\d\\-]", "");
                logger.info("‚ÑπÔ∏è –õ–æ–≥–∏ –∑–∞ –¥–∞—Ç—É {} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", safeDate);
                return ResponseEntity.status(404).body("–õ–æ–≥–∏ –∑–∞ –¥–∞—Ç—É " + date + " –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            }

            File tempFile = File.createTempFile("log-" + date + "-", ".txt");
            Files.write(tempFile.toPath(), filteredLines);

            Resource resource = new FileSystemResource(tempFile);

            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=log-"
                            + date + ".txt")
                    .contentType(MediaType.TEXT_PLAIN)
                    .body(resource);

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–µ {}: {}", date, e.getMessage());
            return ResponseEntity.badRequest().body("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π yyyy-MM-dd");
        }
    }
}
